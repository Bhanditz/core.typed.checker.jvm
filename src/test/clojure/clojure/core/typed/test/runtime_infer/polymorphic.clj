(ns clojure.core.typed.test.runtime-infer.polymorphic
  {:lang :core.typed
   :core.typed {:features #{:runtime-infer}}
   }
  (:refer-clojure :exclude [identity memoize])
  (:require [clojure.core.typed :as t]
            [clojure.core :as core]
            [clojure.pprint :refer [pprint]]))

;; Start: Generated by clojure.core.typed - DO NOT EDIT
(declare)
(t/ann identity [(t/U t/Int t/Sym ':a) :-> (t/U t/Int t/Sym ':a)])
(t/ann
  memoize
  [[(t/U t/Int t/Sym ':a) :-> (t/U t/Int t/Sym ':a)]
   :->
   [(t/U t/Int t/Sym ':a) :-> (t/U t/Int t/Sym ':a)]])
;; End: Generated by clojure.core.typed - DO NOT EDIT
(defn identity [x]
  x)

(defn memoize [f]
  (fn [a]
    (f a)))

(identity 1)
(identity 'a)
(identity :a)

((memoize identity) 1)
((memoize identity) 'a)
((memoize identity) :a)
